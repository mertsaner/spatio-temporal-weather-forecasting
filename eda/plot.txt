# PLOT CODES IN DEBUG

## X

plt.close("all")
plt.clf()
fig, axs = plt.subplots(9, 10, figsize=(40, 20))
images = []
for d in range(9):
    for t in range(10):
        images.append(axs[d, t].imshow(x.detach().numpy()[1, t, d, :, :], cmap=plt.get_cmap("Spectral")))
        axs[d, t].set_title(f"t={t}")
        axs[d, t].axis("off")
plt.savefig("figures/x.png", bbox_inches="tight", pad_inches=0.01, dpi=300)

## X FLOW

arrw_strd = 1
f = f_x[0, :, :, :, 5, :]
seq_len, m, n, _ = f.shape
X, Y = np.meshgrid(np.arange(0, n), np.arange(0, m))

fig, axs = plt.subplots(1, seq_len, figsize=(20, 1))
for t in range(seq_len):
    U = f[t, :, :, 0]
    V = f[t, :, :, 1]

    q = axs[t].quiver(X[::arrw_strd, ::arrw_strd],
                      Y[::arrw_strd, ::arrw_strd],
                      U[::arrw_strd, ::arrw_strd],
                      V[::arrw_strd, ::arrw_strd])
    axs[t].set_xlim(0, n)
    axs[t].set_ylim(0, m)
    axs[t].tick_params(bottom=False, left=False, labelbottom=False, labelleft=False)

fig.savefig(f"figures/flow.png", bbox_inches="tight", pad_inches=0.1, dpi=300)


## ALPHAS

fig, axs = plt.subplots(9, 10, figsize=(40, 20))
images = []
for d in range(9):
    for t in range(10):
        images.append(axs[d, t].imshow(alphas[t].detach().numpy()[1, d, :, :]))
        axs[d, t].axis("off")
plt.subplots_adjust(wspace=0.01, hspace=0)
plt.savefig(f"figures/alphas/alphas.png", bbox_inches="tight", pad_inches=0.01, dpi=300)


## PRED & LABEL

fig, axs = plt.subplots(2, 10, figsize=(20, 3))
images = []
for t in range(10):
    images.append(axs[0, t].imshow(y.detach().numpy()[0, t, 0, :, :], cmap=plt.get_cmap("Spectral")))
    axs[1, t].imshow(pred.detach().numpy()[0, t, 0, :, :], cmap=plt.get_cmap("Spectral"))
    axs[0, t].axis("off")
    axs[1, t].axis("off")
    axs[0, t].set_title(f"t={t}")
plt.subplots_adjust(wspace=0, hspace=0)
clb = fig.colorbar(images[0], ax=axs, orientation='vertical', fraction=.02, aspect=10, drawedges=False, pad=0.01)
clb.ax.tick_params(labelsize=10)
clb.outline.set_linewidth(0.01)
plt.savefig("figures/comparision.png", bbox_inches="tight", pad_inches=0.01, dpi=300)


## VALIDATION CURVE

plt.close("all")
plt.figure(figsize=(20, 6))
plt.plot(range(len(loss_u_net[1])), loss_u_net[1], '->', label="UNet", color='g', lw=1.8)
plt.plot(range(len(loss_convlstm[1])), loss_convlstm[1], '->', label="ConvLSTM", color='b', lw=1.8)
plt.plot(range(len(loss_weather_no_attn[1])), loss_weather_no_attn[1], '->', label="WeatherModelNoAttn", color='k', lw=1.8)
plt.plot(range(len(loss_weather_model[1])), loss_weather_model[1], '->', label="WeatherModel", color='r', lw=1.8)
xaxis = range(0, len(loss_weather_model[1]) + 1)
yaxis = np.linspace(1.3, 4, 20)
ylabels = ["{:.2f}".format(label) for label in yaxis]
plt.xticks(xaxis)
plt.yticks(yaxis, ylabels)
plt.xlim(0, len(loss_weather_model[1]))
plt.ylim(1.3, 4)
plt.title("Validation Loss Curve", fontsize=16)
plt.xlabel("Epochs", fontsize=16)
plt.ylabel("MSE", fontsize=16)
plt.grid(True)
plt.legend(fontsize=18)
plt.savefig(f"figures/validation_curve.png", bbox_inches="tight", pad_inches=0.1, dpi=300)



